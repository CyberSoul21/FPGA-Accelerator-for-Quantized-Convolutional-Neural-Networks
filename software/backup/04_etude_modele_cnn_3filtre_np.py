import matplotlib as mpl
mpl.rcParams['legend.fontsize'] = 12;
mpl.rcParams['axes.labelsize']  = 12; 
mpl.rcParams['xtick.labelsize'] = 12; 
mpl.rcParams['ytick.labelsize'] = 12;
mpl.rcParams['text.usetex'] = True;
mpl.rcParams['font.family'] = 'sans-serif';
mpl.rcParams['mathtext.fontset']    = 'dejavusans';
mpl.rcParams['text.latex.preamble'] = [r'\usepackage{mathrsfs}'];
mpl.rcParams.update({'font.size': 12});

import matplotlib.pyplot as plt
import numpy as np
#np.set_printoptions(threshold=sys.maxsize) # Printing all the weights

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3';                  # TF debug messages
# 0 = all messages are logged (default behavior)
# 1 = INFO messages are not printed
# 2 = INFO and WARNING messages are not printed
# 3 = INFO, WARNING, and ERROR messages are not printed

import sys
import tensorflow as tf
from tensorflow import keras

from ctypes import *
from mes_fonctions import *


print(" \n ");
print("************************************** ");
print(" Testing fonctions en CPP avec ctypes  ");
print("************************************** ");
monbib = CDLL("mes_fon_CPP/monbib.so");                    # Bibliothèque CPP
print(monbib);
monbib.print_cpp();

print(" \n ");
print("************************************** ");
print(" Image d'entrée                        ");
print("************************************** ");

#'''
# Definer l'image d'entrée (28,28,1)
#lst = [3,5,1,18,4,8,11,17,84,7];

# Load MNIST data set 
#mnist = keras.datasets.mnist;
#(train_images, train_labels), (test_images, test_labels) = mnist.load_data();

#img_test = test_images[18];

#img_test = np.asarray(img_test);                           # Convertir données à tableau numpy
#'''
# Definer l'image d'entrée (28,28,1)


'''
img_test = \
[[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,  18,  18,  18, 126, 136, 175,  26, 166, 255, 247, 127,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,  30,  36,  94, 154, 170, 253, 253, 253, 253, 253, 225, 172, 253, 242, 195,  64,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,  49, 238, 253, 253, 253, 253, 253, 253, 253, 253, 251,  93,  82,  82,  56,  39,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,  18, 219, 253, 253, 253, 253, 253, 198, 182, 247, 241,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,  80, 156, 107, 253, 253, 205,  11,   0,  43, 154,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   1, 154, 253,  90,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 139, 253, 190,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 190, 253,  70,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35, 241, 225, 160, 108,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  81, 240, 253, 253, 119,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  45, 186, 253, 253, 150,  27,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,  93, 252, 253, 187,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 249, 253, 249,  64,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  46, 130, 183, 253, 253, 207,   2,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  39, 148, 229, 253, 253, 253, 250, 182,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24, 114, 221, 253, 253, 253, 253, 201,  78,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,  23,  66, 213, 253, 253, 253, 253, 198,  81,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,  18, 171, 219, 253, 253, 253, 253, 195,  80,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,  55, 172, 226, 253, 253, 253, 253, 244, 133,  11,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0, 136, 253, 253, 253, 212, 135, 132,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]];
'''


'''
img_test

img_test = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 14, 14, 13, 12, 11, 11, 11, 11, 11, 10, 9, 8, 10, 9, 9, 9, 10, 10, 9, 10, 0, 0, 0, 0], [0, 0, 0, 0, 13, 13, 11, 11, 11, 10, 2, 0, 0, 0, 1, 3, 0, 6, 8, 7, 8, 9, 9, 10, 0, 0, 0, 0], [0, 0, 0, 0, 13, 12, 11, 10, 10, 8, 45, 75, 86, 103, 116, 124, 83, 7, 6, 8, 8, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 13, 12, 11, 10, 8, 8, 108, 140, 99, 91, 83, 84, 141, 87, 0, 8, 7, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 13, 12, 10, 9, 8, 5, 8, 7, 0, 0, 0, 0, 37, 145, 35, 0, 8, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 12, 12, 10, 9, 8, 6, 3, 3, 3, 3, 2, 0, 55, 139, 23, 1, 7, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 13, 12, 10, 9, 7, 5, 4, 0, 8, 12, 18, 70, 144, 53, 0, 5, 5, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 13, 12, 10, 8, 7, 4, 9, 112, 148, 148, 156, 175, 66, 0, 5, 3, 5, 6, 7, 9, 0, 0, 0, 0], [0, 0, 0, 0, 12, 11, 10, 8, 6, 6, 2, 69, 109, 91, 88, 110, 136, 30, 1, 5, 5, 6, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 12, 11, 9, 7, 6, 5, 5, 0, 0, 0, 0, 0, 88, 115, 0, 5, 5, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 12, 11, 9, 8, 6, 5, 1, 2, 4, 4, 0, 0, 87, 128, 2, 4, 6, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 12, 10, 9, 7, 7, 4, 15, 17, 6, 11, 36, 107, 153, 33, 1, 6, 6, 7, 8, 10, 0, 0, 0, 0], [0, 0, 0, 0, 12, 11, 9, 8, 8, 0, 79, 158, 143, 142, 139, 99, 22, 0, 5, 4, 5, 7, 9, 10, 0, 0, 0, 0], [0, 0, 0, 0, 12, 11, 10, 8, 7, 5, 10, 51, 69, 44, 12, 0, 0, 6, 4, 6, 7, 9, 10, 11, 0, 0, 0, 0], [0, 0, 0, 0, 12, 11, 10, 8, 7, 6, 3, 0, 0, 0, 2, 7, 5, 5, 6, 7, 8, 9, 10, 12, 0, 0, 0, 0], [0, 0, 0, 0, 13, 12, 10, 9, 8, 7, 6, 7, 7, 6, 6, 5, 5, 5, 6, 7, 9, 10, 11, 13, 0, 0, 0, 0], [0, 0, 0, 0, 14, 13, 11, 10, 10, 8, 7, 7, 6, 6, 6, 7, 7, 7, 8, 9, 11, 12, 13, 14, 0, 0, 0, 0], [0, 0, 0, 0, 10, 9, 8, 6, 6, 5, 4, 4, 3, 4, 3, 3, 3, 3, 3, 4, 4, 6, 7, 9, 0, 0, 0, 0], [0, 0, 0, 0, 27, 29, 28, 27, 25, 24, 22, 20, 19, 20, 21, 22, 24, 27, 32, 35, 35, 34, 33, 32, 0, 0, 0, 0], [0, 0, 0, 0, 77, 79, 83, 87, 88, 90, 91, 90, 91, 91, 93, 93, 92, 92, 93, 93, 96, 97, 98, 101, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

img_test = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 34, 34, 33, 32, 31, 31, 31, 31, 31, 30, 29, 28, 30, 29, 29, 29, 30, 30, 29, 30, 0, 0, 0, 0], [0, 0, 0, 0, 33, 33, 31, 31, 31, 30, 22, 0, 0, 0, 21, 23, 0, 26, 28, 27, 28, 29, 29, 30, 0, 0, 0, 0], [0, 0, 0, 0, 33, 32, 31, 30, 30, 28, 65, 95, 106, 123, 136, 144, 103, 27, 26, 28, 28, 29, 29, 29, 0, 0, 0, 0], [0, 0, 0, 0, 33, 32, 31, 30, 28, 28, 128, 160, 119, 111, 103, 104, 161, 107, 0, 28, 27, 27, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 33, 32, 30, 29, 28, 25, 28, 27, 0, 0, 0, 0, 57, 165, 55, 0, 28, 27, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 32, 32, 30, 29, 28, 26, 23, 23, 23, 23, 22, 0, 75, 159, 43, 21, 27, 27, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 33, 32, 30, 29, 27, 25, 24, 0, 28, 32, 38, 90, 164, 73, 0, 25, 25, 27, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 33, 32, 30, 28, 27, 24, 29, 132, 168, 168, 176, 195, 86, 0, 25, 23, 25, 26, 27, 29, 0, 0, 0, 0], [0, 0, 0, 0, 32, 31, 30, 28, 26, 26, 22, 89, 129, 111, 108, 130, 156, 50, 21, 25, 25, 26, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 32, 31, 29, 27, 26, 25, 25, 0, 0, 0, 0, 0, 108, 135, 0, 25, 25, 27, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 32, 31, 29, 28, 26, 25, 21, 22, 24, 24, 0, 0, 107, 148, 22, 24, 26, 27, 28, 29, 0, 0, 0, 0], [0, 0, 0, 0, 32, 30, 29, 27, 27, 24, 35, 37, 26, 31, 56, 127, 173, 53, 21, 26, 26, 27, 28, 30, 0, 0, 0, 0], [0, 0, 0, 0, 32, 31, 29, 28, 28, 0, 99, 178, 163, 162, 159, 119, 42, 0, 25, 24, 25, 27, 29, 30, 0, 0, 0, 0], [0, 0, 0, 0, 32, 31, 30, 28, 27, 25, 30, 71, 89, 64, 32, 0, 0, 26, 24, 26, 27, 29, 30, 31, 0, 0, 0, 0], [0, 0, 0, 0, 32, 31, 30, 28, 27, 26, 23, 0, 0, 0, 22, 27, 25, 25, 26, 27, 28, 29, 30, 32, 0, 0, 0, 0], [0, 0, 0, 0, 33, 32, 30, 29, 28, 27, 26, 27, 27, 26, 26, 25, 25, 25, 26, 27, 29, 30, 31, 33, 0, 0, 0, 0], [0, 0, 0, 0, 34, 33, 31, 30, 30, 28, 27, 27, 26, 26, 26, 27, 27, 27, 28, 29, 31, 32, 33, 34, 0, 0, 0, 0], [0, 0, 0, 0, 30, 29, 28, 26, 26, 25, 24, 24, 23, 24, 23, 23, 23, 23, 23, 24, 24, 26, 27, 29, 0, 0, 0, 0], [0, 0, 0, 0, 47, 49, 48, 47, 45, 44, 42, 40, 39, 40, 41, 42, 44, 47, 52, 55, 55, 54, 53, 52, 0, 0, 0, 0], [0, 0, 0, 0, 97, 99, 103, 107, 108, 110, 111, 110, 111, 111, 113, 113, 112, 112, 113, 113, 116, 117, 118, 121, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]


img_test = \
[[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 153, 153,   0, 153,
         31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 102, 255,   0,   0,   0,   0,
        204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        122, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,
        214,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 194,
        132,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  51, 255, 255, 255,
         51,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 153, 153, 153,  61,
        153,  82,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 245,  82,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  61, 102, 163,
        173,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 204, 234, 255, 173,
         10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 204, 204,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]];
'''

img_test = \
[[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 153, 153,   0, 153,
         31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 102, 255,   0,   0,   0,   0,
        204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        122, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,
        214,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 194,
        132,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  51, 255, 255, 255,
         51,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 153, 153, 153,  61,
        153,  82,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 245,  82,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 204,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  61, 102, 163,
        173,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 204, 234, 255, 173,
         10,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 204, 204,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]];

img_test = \
[[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 223, 223,   0, 223,
        201,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 222, 255,   0,   0,   0,   0,
        224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        242, 224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 240,
        234,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 214,
        202,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 221, 255, 255, 255,
        221,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 223, 223, 223, 231,
        223, 202,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 245, 202,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 224,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 231, 222, 233,
        243,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 224, 234, 255, 243,
        230,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 224, 224,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]];



img_test = \
[[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  35,  46,  46,
         65, 275, 179,  46,  26,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  52, 200, 275, 205,
        199, 199, 230, 275, 141,  26,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,  52, 201, 201, 148,  31,
          0,   0,  73, 222, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  35, 218, 200,  52,   0,   0,
          0,   0,   0,  65, 230, 205,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  41, 275, 169,   0,   0,   0,
          0,   0,   0,   0, 211, 275,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 275, 211,   0,   0,   0,   0,
          0,   0,   0,  35, 218, 275,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 275, 211,   0,   0,   0,   0,
          0,   0,   0, 169, 275, 275,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 275, 211,   0,   0,   0,   0,
          0,   0,   0, 169, 275, 158,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 111, 211,   0,   0,   0,   0,
          0,   0,  94, 243, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  22,  96, 249, 249, 249, 249,
        249, 249, 260, 275, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 116, 249, 249, 249,
        249, 192,   0, 169, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0, 169, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0, 169, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,  94, 243, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0, 126, 275, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,  31, 179, 275,  41,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,  94, 243, 218,  35,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0, 169,  84,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0, 169,  84,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0, 169,  84,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]];  

img_test = \
[[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0, 103, 275, 217,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 261, 275, 217,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 275, 275, 275,
        275, 275, 275, 275, 275, 275, 275, 275, 217,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 275, 275, 275,
        145,  67,  67,  67,  67,  67,  67,  67,  56,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 275, 134,  80,
         43,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 275,  90,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 145,  44,   0,
          0,   0,   0,   0,   0,  83, 133,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 197, 174, 174,
        174, 174, 174, 174, 174, 212, 242, 174, 174, 147,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 275, 275, 275, 275, 275, 275, 275,
        275, 275, 275, 275, 275, 275, 275, 275, 275, 255, 143,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 148, 265, 275, 275, 275, 275, 275,
        195, 148, 148, 148, 148, 148, 148, 148, 176, 275, 259, 138,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 256, 275, 275, 275, 192, 161,
         73,   0,   0,   0,   0,   0,   0,   0,  52, 181, 275, 256,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 163, 174, 174, 174,  62,   0,
          0,   0,   0,   0,   0,   0,   0,   0,  43, 147, 275, 263, 121,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,  77, 275, 275, 275, 275,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,  44,  94, 135, 275, 275, 269, 201,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,  43, 144, 275, 275, 275, 267, 200,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,  61,  67,  67,  33,   0,
         49,  67,  67,  67,  67, 145, 275, 275, 264, 228, 202,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  51, 247, 275, 275, 114,  53,
        192, 275, 275, 275, 275, 275, 264, 242, 192,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0, 237, 255, 255, 255, 269, 275,
        262, 255, 255, 255, 255, 255, 178,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 205, 275,
        116,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]];


img_test = np.asarray(img_test);


# Imprimer quelques images
fig = plt.figure(figsize=(3,3)); 
plt.imshow(img_test, cmap="gray", interpolation=None);
plt.title(r"$~5~$");
plt.tight_layout();
plt.show();
print(img_test);


print(" \n ");
print("************************************** ");
print(" Quantization de l'image               ");
print("************************************** ");
scale = 0.04896376;  zero_point = -6;
img_test = quant_np(img_test, scale, zero_point, verbose=1);
print(img_test);
#sys.exit(0); 

print(" \n ");
print("************************************** ");
print(" Convolution                           ");
print("************************************** ");
entree = img_test;



scale = 0.04699058458209038;                               # quant_conv2d/BiasAdd
offset_ent =  6;                                           # input_offset  =  -zero_point de l'entrée  quant_reshape/Reshape
offset_sor = -1;                                           # output_offset =   zero_point de la sortie quant_conv2d/Relu

con_f0 = \
[[  46,  -9,-127],
 [  70, -23, -93],
 [ -20, -88, -86]]; con_f0 = np.asarray(con_f0);           # filtre 0 conv2d
con_b0 = -843;                                            # bias   0 conv2d  
M_b0   = 0.00013639 / scale;                            # (quant_conv2d/BiasAdd/ReadVariableOp)/(quant_conv2d/BiasAdd)--> (S1*S2)/S3 --> Sbias/SBiasAdd
shift = c_int(); M0 = c_int();      
monbib.QuantizeMultiplier( c_double(M_b0), byref(M0), byref(shift) );
print("M_b0= ", M_b0, "M0= ", M0.value, "shift= ", shift.value);
mc_0 = conv_np(entree, con_f0, con_b0, M0.value, shift.value, offset_ent, offset_sor, verbose=1);  #print(mc_0);

con_f1 = \
[[ -79, -63,  51],
 [  78,  58,  61],
 [-127,  91, -72]]; con_f1 = np.asarray(con_f1);           # filtre 1 conv2d
con_b1 = -1235;                                             # bias   1 conv2d  
M_b1   = 0.00010726 / scale;                            # (quant_conv2d/BiasAdd/ReadVariableOp)/(quant_conv2d/Relu)--> (S1*S2)/S3 --> Sbias/Srelu
shift = c_int(); M0 = c_int();      
monbib.QuantizeMultiplier( c_double(M_b1), byref(M0), byref(shift) );
print("M_b1= ", M_b1, "M0= ", M0.value, "shift= ", shift.value);
mc_1 = conv_np(entree, con_f1, con_b1, M0.value, shift.value, offset_ent, offset_sor, verbose=1); # print(mc_1);

con_f2 = \
[[ -33,-111,-115],
 [-127,  28,  14],
 [ -40,  68,  47]]; con_f2 = np.asarray(con_f2);           # filtre 2 conv2d
con_b2 = -696;                                            # bias   2 conv2d  
M_b2   = 0.00012325 / scale;                            # (quant_conv2d/BiasAdd/ReadVariableOp)/(quant_conv2d/Relu)--> (S1*S2)/S3 --> Sbias/Srelu
shift = c_int(); M0 = c_int();      
monbib.QuantizeMultiplier( c_double(M_b2), byref(M0), byref(shift) );
print("M_b2= ", M_b2, "M0= ", M0.value, "shift= ", shift.value);
mc_2 = conv_np(entree, con_f2, con_b2, M0.value, shift.value, offset_ent, offset_sor, verbose=1); # print(mc_2);

for x in mc_1:
    for y in x:
        print(int(y))


print(" \n ");
print("************************************** ");
print(" MaxPooling (2,2)                      ");
print("************************************** ");
mp_0  = maxpool_np(mc_0,  verbose=1);
mp_1  = maxpool_np(mc_1,  verbose=1);
mp_2  = maxpool_np(mc_2,  verbose=1);
print(mp_0);  print(mp_1);  print(mp_2);
#sys.exit(0); # Terminer l'execution


con_aux0  = np.zeros([13, 3]); con_aux1  = np.zeros([13, 3]); con_aux2  = np.zeros([13, 3]);
con_aux3  = np.zeros([13, 3]); con_aux4  = np.zeros([13, 3]); con_aux5  = np.zeros([13, 3]);
con_aux6  = np.zeros([13, 3]); con_aux7  = np.zeros([13, 3]); con_aux8  = np.zeros([13, 3]);
con_aux9  = np.zeros([13, 3]); con_aux10  = np.zeros([13, 3]); con_aux11  = np.zeros([13, 3]);
con_aux12  = np.zeros([13, 3]); 

# con_aux
con_aux0[:, 0] = mp_0[0,:]; con_aux0[:, 1] = mp_1[0,:]; con_aux0[:, 2] = mp_2[0,:];
con_aux1[:, 0] = mp_0[1,:]; con_aux1[:, 1] = mp_1[1,:]; con_aux1[:, 2] = mp_2[1,:];
con_aux2[:, 0] = mp_0[2,:]; con_aux2[:, 1] = mp_1[2,:]; con_aux2[:, 2] = mp_2[2,:];

con_aux3[:, 0] = mp_0[3,:]; con_aux3[:, 1] = mp_1[3,:]; con_aux3[:, 2] = mp_2[3,:];
con_aux4[:, 0] = mp_0[4,:]; con_aux4[:, 1] = mp_1[4,:]; con_aux4[:, 2] = mp_2[4,:];
con_aux5[:, 0] = mp_0[5,:]; con_aux5[:, 1] = mp_1[5,:]; con_aux5[:, 2] = mp_2[5,:];

con_aux6[:, 0] = mp_0[6,:]; con_aux6[:, 1] = mp_1[6,:]; con_aux6[:, 2] = mp_2[6,:];
con_aux7[:, 0] = mp_0[7,:]; con_aux7[:, 1] = mp_1[7,:]; con_aux7[:, 2] = mp_2[7,:];
con_aux8[:, 0] = mp_0[8,:]; con_aux8[:, 1] = mp_1[8,:]; con_aux8[:, 2] = mp_2[8,:];

con_aux9[:, 0] = mp_0[9,:]; con_aux9[:, 1] = mp_1[9,:];     con_aux9[:, 2] = mp_2[9,:];
con_aux10[:, 0] = mp_0[10,:]; con_aux10[:, 1] = mp_1[10,:]; con_aux10[:, 2] = mp_2[10,:];
con_aux11[:, 0] = mp_0[11,:]; con_aux11[:, 1] = mp_1[11,:]; con_aux11[:, 2] = mp_2[11,:];

con_aux12[:, 0] = mp_0[12,:]; con_aux12[:, 1] = mp_1[12,:]; con_aux12[:, 2] = mp_2[12,:];


print(" \n ");
print("************************************** ");
print(" Flatten                               ");
print("************************************** ");
flatten_aux = np.append(con_aux0, con_aux1);
flatten_aux = np.append(flatten_aux, con_aux2);
flatten_aux = np.append(flatten_aux, con_aux3);
flatten_aux = np.append(flatten_aux, con_aux4);
flatten_aux = np.append(flatten_aux, con_aux5);
flatten_aux = np.append(flatten_aux, con_aux6);
flatten_aux = np.append(flatten_aux, con_aux7);
flatten_aux = np.append(flatten_aux, con_aux8);
flatten_aux = np.append(flatten_aux, con_aux9);
flatten_aux = np.append(flatten_aux, con_aux10);
flatten_aux = np.append(flatten_aux, con_aux11);
flatten_aux = np.append(flatten_aux, con_aux12);
flatten_aux = np.expand_dims(flatten_aux, axis=0); print(flatten_aux);
#sys.exit(0); # Terminer l'execution


for x in flatten_aux[0]:
    print(int(x))

print(" \n ");
print("************************************** ");
print(" Full connected                        ");
print("************************************** ");


fc_w0 = [-57,54,-37,-5,-52,0,-22,-43,14,36,31,40,49,-57,
36,-4,-19,0,-62,25,-21,-6,-11,-39,-15,-26,-28,40,
20,14,-24,55,42,-52,46,14,47,35,15,43,-31,-52,
-17,16,32,-2,-40,13,-76,-74,14,-26,21,-28,-32,-10,
1,-55,-29,72,22,-19,28,-15,23,-3,-14,23,28,-63,
-29,-29,13,-55,-1,16,3,22,41,14,-68,-26,19,38,
-33,-8,-37,-14,12,-53,-44,-7,54,-65,-34,-19,-9,-24,
-8,11,23,59,-32,-43,-1,-41,44,36,-87,-39,45,-20,
38,39,32,-2,-34,-21,-63,38,-56,12,-41,44,-33,23,
12,7,-27,8,-11,-22,-31,-6,-9,-7,45,-36,-53,-11,
-29,-35,31,-25,7,-7,5,-38,-20,-51,-57,40,2,2,
13,-39,58,39,-9,54,-3,-36,-18,52,11,-33,16,-2,
28,24,-11,16,-17,-4,69,10,-32,-38,55,-31,-14,-29,
-34,-32,23,-72,22,46,-55,-39,31,17,-44,4,-18,10,
-44,-31,41,36,31,33,-30,14,60,29,0,-27,-21,33,
14,-10,-64,16,-50,-17,90,1,-93,35,54,-100,-4,-45,
-26,12,8,-7,67,-39,56,23,-3,28,20,-77,9,-47,
-10,-16,-16,26,44,49,-44,-15,51,31,-39,26,11,-35,
89,-63,-50,21,8,7,-8,-37,16,3,-10,-53,-5,24,
-37,23,-23,-71,51,-13,-72,-30,-87,-67,10,-14,54,63,
24,-34,-29,54,13,76,-5,-30,16,10,17,34,-39,-21,
-16,-12,41,-28,31,10,23,41,54,12,6,-8,39,66,
-84,23,-35,-40,59,-41,-49,-21,25,-17,-5,-3,-61,36,
75,13,6,-30,14,85,-33,-27,35,-6,39,-12,-27,35,
13,-17,42,44,14,-16,20,57,62,-12,-15,15,5,-21,
10,41,23,27,19,16,-30,-38,44,14,-19,-25,-62,-49,
55,22,27,-19,-6,-16,-11,25,1,-49,-31,78,25,43,
-51,5,9,46,-12,31,70,12,-50,29,27,55,6,22,
-60,31,26,-25,19,4,-3,18,-12,-3,-19,-28,-11,31,
25,15,59,2,10,-31,-44,-34,48,3,-5,30,-4,38,
-9,0,-44,-16,-8,-40,-22,42,-5,7,32,-26,-64,-25,
47,-13,4,16,-13,69,-49,-38,-3,-88,-17,41,-35,13,
3,2,20,55,2,-10,-24,-42,-29,-10,45,32,37,59,
-30,-61,-12,-10,28,56,64,-68,45,-61,-2,-27,-52,-40,
8,-31,-82,-11,5,-74,8,-69,9,40,-65,-49,18,-90,
-22,37,-26,-26,9,-59,-38,28,-33,19,-13,8,5,-25,
-83,56,34]; fc_w0 = np.asarray([fc_w0]);

count = 0
for i in range(0,507):
    if fc_w0[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w0[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w0[0][i]))+";")  
    count +=1 

fc_w1 = [-58,-29,34,-53,2,53,33,-62,19,57,72,9,-23,3,22,3,30,19,
-2,-4,-20,54,27,-9,2,-8,-61,12,-32,39,-45,-68,-4,29,-52,28,
34,-7,-34,-3,47,10,-15,-56,34,-56,-13,-2,33,-12,24,4,-26,20,
49,-4,45,11,-18,-8,8,48,53,45,-7,-12,90,3,17,-9,-18,-18,
36,-3,16,4,-63,-44,-1,-49,76,63,-19,39,19,-88,-13,-65,-28,-57,
49,-27,-68,74,28,-1,35,11,7,71,-54,41,-8,-22,20,12,-30,-9,
44,-27,25,-15,-15,-36,50,25,-48,-50,-26,-30,-30,-9,-21,-56,-2,9,
1,22,-20,-58,27,-9,2,-43,29,-18,-25,-29,28,7,29,23,-6,28,
-31,-21,-5,21,26,-63,-6,-42,-60,0,26,-37,12,-5,-66,43,-38,-54,
-74,-40,-35,-4,-44,-44,-54,-29,-18,-10,22,-20,9,50,-32,23,50,-1,
25,-64,-91,23,-33,-31,26,-37,2,-24,-50,5,39,-61,-36,61,20,42,
44,-41,13,-50,37,3,4,44,-16,18,-27,-34,0,18,52,-57,22,11,
-5,-28,-7,1,14,12,23,-50,-64,-48,11,-43,25,26,4,-52,34,-29,
40,78,17,12,45,-58,28,29,-4,-51,-43,31,-23,-14,49,-3,-20,40,
24,-19,-39,42,12,8,64,12,-56,-75,-55,-24,-46,-43,38,-56,33,4,
-52,26,39,-26,57,-29,-47,46,-60,19,-6,-63,-68,-7,-29,39,-10,-51,
13,67,15,0,36,18,34,-46,-28,49,-57,18,-60,-42,-34,46,0,-32,
0,-54,-45,-4,-35,-43,-2,16,-12,-41,31,-14,48,-42,-7,-62,-24,56,
41,0,1,-8,28,-77,16,13,-12,56,-64,-39,29,32,13,-13,0,16,
23,-39,-21,-9,-64,24,45,52,18,-54,22,31,-6,-71,-22,21,7,12,
1,-30,13,-34,17,-58,31,54,53,-4,52,-69,-42,29,-29,10,-21,-15,
-35,39,22,18,39,-19,13,0,41,31,18,30,20,60,-24,65,53,77,
28,-20,-25,71,14,0,16,5,19,4,-20,-28,-14,7,-18,-30,16,-52,
-36,21,-27,-10,-24,0,-2,12,-9,25,69,-53,19,-16,11,43,-31,-18,
59,-27,-25,57,19,25,-20,39,-61,27,9,-5,16,36,-51,-3,16,-53,
14,-17,9,50,50,32,84,13,-44,43,-26,-5,-71,74,0,-33,-1,42,
-37,-43,-39,-39,34,-8,-16,14,-41,28,-19,-27,-4,37,-71,2,-8,-20,
-37,42,-2,3,30,34,-17,-58,-55,0,12,49,2,-36,-49,-27,-53,47,
50,45,-56]; fc_w1 = np.asarray([fc_w1]);

count = 0
for i in range(0,507):
    if fc_w1[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w1[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w1[0][i]))+";")  
    count +=1 

fc_w2 = [-4,-18,12,-9,29,-53,-39,40,29,18,4,-21,-79,-28,65,-13,-11,-39,
3,12,51,-32,-1,-60,49,-17,-56,-7,-24,22,42,-51,-35,33,54,-9,
38,-26,71,2,-90,44,-66,-36,-27,-4,-37,-14,44,22,7,3,38,9,
-41,20,53,17,10,-34,-36,51,39,-50,44,-46,-21,-21,-15,-12,31,2,
-18,-5,-15,-4,-68,-13,28,0,-13,33,11,64,-89,6,13,-32,2,-11,
9,5,-12,5,2,19,-60,36,-4,-77,-5,-12,-74,49,-17,-41,-17,5,
25,-11,12,-73,-56,-61,-5,49,-26,-61,18,29,30,-20,19,-56,-29,19,
-16,48,30,-16,48,0,-43,16,4,7,-13,-26,41,43,-23,-1,-43,-34,
-3,-3,-1,-15,-46,-81,-13,18,-56,-85,12,-71,-70,-4,-19,-68,39,15,
25,-1,-29,1,-10,30,-67,-4,29,-25,-45,13,21,20,-59,12,11,-61,
29,25,-77,-24,-1,-18,-26,14,-56,19,27,10,-5,29,28,11,28,-13,
-25,-44,-28,35,-26,37,7,-37,-17,29,-60,17,23,0,14,-14,-68,36,
-4,27,-57,55,38,-31,39,1,-17,65,-26,66,-5,-24,54,24,83,-1,
12,-72,38,52,-35,71,13,-16,29,-3,-27,37,-64,19,68,-44,-58,37,
54,25,13,44,-22,31,39,-61,35,52,-26,44,-5,-23,58,45,-26,36,
34,25,23,49,-52,65,-9,-12,64,28,34,18,-61,18,64,-57,-25,69,
-35,65,28,48,-19,30,26,30,55,-10,-40,20,21,21,43,12,-26,61,
-36,26,56,-30,55,40,48,3,-6,-31,6,-23,-15,-43,39,11,-18,51,
21,2,54,16,35,-19,0,26,64,-2,3,26,-10,9,32,6,21,30,
-49,26,15,-1,29,-15,-5,42,35,46,20,-26,24,47,-26,-53,31,-63,
-36,10,24,-32,7,-19,-31,38,10,2,-11,42,-41,-7,-3,-24,15,6,
-64,46,-11,-5,43,56,-53,39,79,3,68,60,33,54,45,57,-1,34,
56,7,4,11,-34,7,16,14,-13,38,20,-17,-69,18,16,-2,6,23,
-25,29,41,-8,16,-17,7,49,11,32,-47,33,25,4,-29,4,41,-8,
56,16,-24,2,-27,9,-19,39,-56,-61,-12,-59,-39,-15,57,8,-47,-54,
-23,20,-24,-18,-53,-19,39,60,34,-35,-35,68,30,57,-21,9,-39,-13,
32,-39,-4,40,-77,40,-47,4,22,-4,-17,-21,-14,-1,19,-14,-72,12,
-29,-17,-39,1,-25,29,3,-48,15,3,-2,-61,-4,-21,-35,-52,-68,52,
-20,-40,-19]; fc_w2 = np.asarray([fc_w2]);

count = 0
for i in range(0,507):
    if fc_w2[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w2[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w2[0][i]))+";")  
    count +=1 


fc_w3 = [61,29,25,-56,2,-21,25,40,-15,-40,30,-17,-37,36,86,0,-40,6,
10,34,52,-95,-33,-51,42,-56,-22,-89,7,20,33,13,9,-69,-26,15,
-26,-37,-35,62,46,0,-11,38,42,21,37,20,-20,17,-32,54,30,22,
-30,12,25,-44,-27,-2,24,28,8,-36,-1,-28,-40,-30,-20,-14,26,-7,
-53,-64,-85,11,-10,9,-38,-6,-35,47,-13,81,30,25,36,-27,-5,36,
42,5,28,6,-28,64,-82,-14,-9,-73,14,-17,-14,12,20,-19,-51,-4,
-19,34,-36,-74,-14,52,-40,-50,16,36,55,68,-56,-17,-8,-15,-12,-40,
-67,6,12,-43,22,-10,-27,-15,-9,15,52,-18,31,35,0,10,-12,-4,
29,3,9,12,-57,-45,15,-64,-86,-22,-63,19,42,-13,11,-27,49,-28,
41,18,48,33,-26,10,-52,-4,-7,-41,47,39,-42,14,33,27,-4,61,
52,-21,-35,21,21,-50,17,-12,-19,12,-9,-6,-13,13,75,-32,28,-11,
43,-56,-8,2,0,19,14,-20,35,-16,6,37,-35,-6,80,-2,-3,47,
-21,41,-13,-17,-26,-45,6,-27,-43,-27,-69,-29,17,40,-79,-79,-28,-43,
-18,55,-2,-59,-65,33,33,-79,-27,4,-35,46,43,13,68,-43,19,60,
9,-3,-7,-2,22,-23,35,11,31,33,-25,-44,-44,3,-32,-84,33,-60,
-69,27,-17,42,-8,60,13,55,-19,-14,-14,2,-58,-38,-24,-7,-69,35,
-61,36,-1,-74,37,-21,-60,-15,11,-56,7,8,-39,26,-24,-34,30,-13,
-18,-29,-66,-50,-66,-15,66,64,-7,-19,23,37,47,-12,65,-52,-17,-22,
-44,25,27,-11,-18,-35,-90,-15,50,-58,-38,40,-16,12,-3,24,-47,1,
24,56,13,2,-38,30,18,-36,11,31,4,60,79,47,16,-48,7,-22,
-32,49,45,-38,-14,26,-60,17,48,-31,-34,19,3,10,-8,36,14,37,
-36,-38,-9,48,-42,-1,26,51,14,-57,-39,-16,47,2,8,36,-4,-3,
-60,15,8,-61,-9,-9,-91,-53,67,-37,20,-14,-23,11,46,-3,20,30,
-5,13,36,9,9,8,-7,-45,-61,-15,23,-11,-32,40,-1,-14,55,34,
29,3,10,-38,32,81,8,45,7,2,16,43,-49,28,80,0,42,57,
-17,9,48,-6,-29,-33,8,29,33,24,-60,43,-60,35,-22,-75,-8,-9,
71,57,-8,-2,46,31,88,75,28,-55,40,2,7,6,36,18,-4,49,
8,31,-19,-49,33,-19,-6,-19,94,-29,-33,60,10,18,-56,30,-48,14,
47,9,-58]; fc_w3 = np.asarray([fc_w3]);

count = 0
for i in range(0,507):
    if fc_w3[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w3[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w3[0][i]))+";")  
    count +=1 

fc_w4 = [-19,-16,1,46,-42,-62,27,-54,12,-30,-48,-46,-22,7,
-67,-27,-65,-52,-58,-37,7,-73,-12,-21,-39,12,5,-110,
-38,13,-10,-10,-10,41,-29,26,11,20,37,15,-54,-18,
-76,42,26,3,21,-39,-91,31,-71,-39,-55,13,-82,-10,
-55,-24,-57,-7,35,-23,-59,-16,-13,12,22,21,-24,-5,
3,-38,58,-6,52,-23,-53,-9,-38,-29,-35,44,38,-12,
-22,-35,-7,38,4,-26,19,11,22,4,-56,-48,38,-5,
1,82,22,-18,9,3,7,33,29,50,12,49,5,2,
58,46,-32,9,-20,57,23,17,-79,44,-42,-57,18,-34,
77,-33,-22,24,-31,-25,120,-15,-37,73,-6,-51,61,31,
30,55,-36,-25,44,-2,-1,-1,51,-10,-5,48,45,-40,
4,6,-51,-38,-62,2,-2,-41,41,12,5,20,22,-12,
77,55,-8,16,-37,-4,101,-9,-24,14,47,11,6,8,
-7,62,-28,-8,41,-34,-25,-4,38,-30,4,-40,36,56,
62,-48,-34,5,-47,59,29,17,51,-1,45,28,6,32,
25,-5,25,21,0,-64,23,50,20,0,6,-27,3,32,
-10,21,-39,-30,43,17,3,-43,-27,29,-42,48,-33,-38,
-15,37,-26,6,40,-29,22,36,-6,16,23,-5,22,-21,
29,-28,-5,-37,31,-44,48,6,48,-1,-2,-3,6,23,
-15,23,21,-27,-30,-39,43,-7,24,23,-82,3,-32,-12,
2,46,-4,-5,33,-25,34,-57,-38,39,31,-19,14,-20,
-21,52,-39,-56,-1,3,35,47,13,0,-22,15,44,24,
9,-13,13,24,-11,9,6,-32,-20,-33,11,-6,-54,-21,
-30,-36,-18,18,-51,0,0,13,11,50,-27,-8,44,-9,
-20,-15,-20,37,-27,-2,49,4,30,29,35,-44,47,-47,
-30,3,-13,-46,-45,-50,-12,10,-20,-67,29,-62,26,54,
-36,-67,-8,-26,6,15,34,-63,-7,9,-44,11,-30,-65,
-39,-10,9,26,-50,29,-10,-41,-39,-35,39,32,-43,-35,
20,-31,-34,16,-28,-26,-14,49,-49,-9,-20,4,1,-23,
-35,22,13,29,-61,-19,-7,-24,-7,-7,4,8,-25,2,
47,-6,-34,65,15,-8,5,-31,-49,57,26,31,-17,-64,
24,-26,24,-23,-10,21,-43,35,42,-22,-10,-24,4,54,
34,-9,14,42,-29,-8,-25,-27,53,3,-7,57,40,1,
26,36,13,0,-26,-1,-13,34,23,24,-35,-6,-50,-20,
-46,-22,36,-3,44,-3,34,-33,-1,-61,-31,11,13,-55,
-33,24,0,21,-27,22,0,4,-31,-7,-20,28,-18,34,
-6,-14,-47]; fc_w4 = np.asarray([fc_w4]);

count = 0
for i in range(0,507):
    if fc_w4[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w4[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w4[0][i]))+";")  
    count +=1 

fc_w5 = [-42,-2,48,-30,30,31,16,-22,19,46,-9,-43,-32,-12,
30,2,29,-14,-2,6,14,40,-45,-35,-10,43,-21,-58,
-37,12,-43,41,14,-83,-29,-26,-12,-39,-41,27,-43,-67,
17,-29,-29,2,0,-7,-8,-3,-46,53,-1,-35,26,-37,
14,-44,22,-38,45,25,-6,30,51,-29,11,-4,-36,54,
-28,27,82,-3,-22,-8,73,-36,37,-19,-59,45,-46,10,
-56,-31,4,19,47,-49,-30,38,21,12,13,18,-66,-20,
28,-33,5,14,37,46,-19,71,58,85,66,-25,-27,39,
65,60,52,37,29,-31,15,-84,-39,-19,-19,33,-22,7,
1,3,-48,21,20,-34,-4,36,-26,-7,42,-12,-21,54,
21,-5,-8,27,-28,20,30,-12,57,19,7,31,39,21,
45,65,26,26,43,-28,-15,19,-60,-19,-7,-51,33,-37,
-15,11,-35,28,57,-3,2,2,22,-66,34,39,-112,-34,
19,-63,-66,25,-12,53,-20,-32,41,64,36,67,28,60,
-39,35,-67,-9,-41,-17,51,-49,19,41,-46,-58,35,-6,
-17,54,44,-13,-17,-10,-36,-28,4,-93,11,-48,-116,-84,
21,-127,-27,-9,-28,19,32,-17,31,-29,40,-44,-6,-51,
34,30,-71,20,-8,-56,1,32,9,37,-34,-22,2,18,
21,-1,-32,26,11,8,-38,-47,-7,-50,-37,-27,-75,-20,
-46,-73,-55,-22,-30,-65,18,-38,-50,-18,-4,-24,30,61,
-23,-22,-43,-8,-34,-1,-7,-10,-22,13,-14,11,3,32,
-77,21,-13,-51,44,0,-52,7,-42,-6,-1,33,-20,-51,
-46,-12,-49,-28,-37,-15,-18,49,62,23,14,41,58,-28,
-16,34,-26,-12,38,-33,-48,45,20,-23,-5,58,-36,-4,
-25,45,55,-32,4,22,-32,55,-26,2,16,-8,15,12,
25,2,-11,51,1,-15,16,-38,19,-10,-61,-2,39,-24,
42,28,-70,-34,68,-33,55,17,-26,-4,-4,73,9,-17,
-28,-26,17,33,-23,43,47,-18,40,57,-18,-88,13,-54,
-13,17,-8,41,-35,-2,-3,-62,-18,33,-10,-23,-1,-50,
-20,17,57,34,53,-13,-9,41,16,13,55,48,55,-23,
35,10,56,68,5,8,-44,-16,-65,5,-27,44,22,-20,
-2,10,-12,35,-10,37,-6,16,2,23,-6,58,4,7,
-15,73,23,-17,1,39,36,-32,6,53,58,-28,-18,34,
-19,58,12,-9,-42,-5,-33,-47,18,76,-55,36,-53,13,
4,10,6,-2,-27,22,49,-9,-24,66,-48,20,15,46,
-17,-11,32,-13,60,61,-15,62,14,47,-58,31,65,20,
55,33,39]; fc_w5 = np.asarray([fc_w5]);

count = 0
for i in range(0,507):
    if fc_w5[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w5[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w5[0][i]))+";")  
    count +=1 

fc_w6 = [46,35,48,43,-20,32,-25,72,68,28,7,48,12,61,
-1,28,11,-3,4,-19,47,47,-25,26,-19,-4,21,30,
58,59,-6,-45,19,16,-24,-1,18,15,24,-15,49,-8,
-10,19,-25,24,-7,-10,38,19,-42,-4,38,-7,93,11,
-53,41,-38,12,49,44,-29,12,-20,12,10,67,-20,-4,
35,-22,0,-20,4,-31,50,35,37,33,-27,-32,-53,-9,
71,1,-80,11,45,-65,81,-42,40,28,-1,-13,19,-22,
51,35,33,24,8,25,-18,21,-7,50,41,57,5,36,
-10,12,78,-30,44,-38,-14,22,-72,0,-19,-19,38,-24,
-9,9,10,21,27,28,8,-35,-19,46,-29,-19,73,34,
18,51,-50,23,42,-57,55,16,-10,-64,15,-44,21,42,
51,-60,-55,-55,14,-62,-29,-68,-8,-19,-60,51,-36,20,
36,28,-59,26,4,61,46,-36,30,17,10,10,-48,-46,
-9,-56,-73,-28,-2,12,14,-52,24,-51,-31,30,-75,-35,
33,-75,58,-10,-54,44,36,1,42,26,-31,-7,26,39,
6,16,24,39,-14,-33,-5,22,54,-42,5,1,-90,-33,
-50,-7,0,44,-12,-64,30,14,-30,-89,11,24,-9,27,
-3,-27,28,36,-14,-22,-13,9,17,31,36,12,-5,-6,
-6,22,26,47,2,-10,-8,-37,-16,11,38,23,-25,-11,
-31,16,34,-57,50,21,-23,-35,-81,41,39,-54,14,-17,
53,-55,-50,-8,28,2,17,-36,-6,47,-32,48,2,49,
-30,65,36,-18,3,28,-41,17,0,-11,63,44,15,-36,
34,-31,-7,4,-25,-11,44,-39,-9,-78,3,-36,-40,25,
13,-12,19,22,-17,30,40,-19,46,16,-2,-33,-28,0,
21,9,16,27,-21,-29,-36,-21,11,45,35,51,-5,-48,
-42,10,-74,-57,-21,-25,-39,-12,-17,-80,-32,22,-108,-3,
26,-60,-22,27,-31,-79,54,-11,-38,-10,19,24,-17,23,
48,27,18,37,-66,-18,52,-64,-58,15,-28,-25,14,1,
-4,40,-7,-60,38,-26,-5,-11,12,-3,11,19,-16,-13,
0,-15,9,48,8,-32,-17,-10,5,39,-3,-21,25,-5,
-25,-11,-58,-51,-22,-27,26,5,-27,-56,42,-20,-12,-20,
-70,-12,-40,-40,-20,-56,-46,-15,18,-83,-40,-18,-84,-43,
-63,26,-29,24,-64,-28,22,-34,-49,-74,-6,29,-65,-38,
-15,35,-25,6,48,0,53,15,-27,-61,-38,4,-55,52,
-43,-26,-74,1,-58,-63,32,-38,37,-45,15,19,-19,-78,
-78,30,-21,-4,21,-60,-61,-38,18,-12,-29,13,-19,28,
-65,-31,-39]; fc_w6 = np.asarray([fc_w6]);

count = 0
for i in range(0,507):
    if fc_w6[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w6[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w6[0][i]))+";")  
    count +=1 

fc_w7 = [-35,-3,42,-38,4,-48,61,-58,-56,-9,-60,-79,27,12,
0,-8,39,3,20,18,-67,35,48,-61,-32,9,-36,-47,
24,-55,-43,1,19,-49,-45,-29,20,-54,-11,-7,10,-37,
-18,-46,-13,-62,-45,16,40,-29,21,-45,-55,-11,37,-33,
-51,-34,-50,-7,-14,-21,-30,-8,8,-62,-84,-32,-29,32,
21,-7,-72,9,-13,18,19,-56,64,-12,66,22,-17,66,
22,29,-9,-88,18,35,-111,20,1,1,-26,31,-32,-20,
54,8,-4,1,9,-17,-14,2,18,-3,-77,0,-38,-84,
-34,24,-84,-57,10,4,22,13,50,-5,57,-7,28,-9,
-19,38,-12,-23,40,-9,-71,21,-27,-63,-23,11,-49,39,
50,-18,-19,18,-9,-38,5,58,6,-4,30,-54,25,14,
-48,-37,45,92,-19,38,66,-14,-5,3,8,-23,32,9,
-36,62,-31,-29,45,-51,-34,64,10,-21,49,-7,-2,-5,
-17,57,11,19,-5,0,-16,-22,-50,3,-67,-2,3,-20,
76,32,-12,61,47,-26,59,-41,2,-63,22,29,-24,20,
24,-11,4,3,1,-50,-40,65,-7,47,0,-11,13,-56,
-19,43,5,-30,-11,-61,-10,-11,-79,26,-2,-30,79,32,
30,33,-10,19,-7,-38,12,24,24,-52,55,49,-89,4,
-13,-31,-15,-1,6,14,35,19,-7,-14,-11,13,16,-21,
-5,-4,-38,56,-2,25,-58,58,-35,0,4,14,-58,56,
5,73,51,-47,6,28,-19,60,37,-36,20,-38,-19,-14,
-14,5,29,-6,45,24,36,13,49,-16,9,28,26,-22,
-48,-9,-77,-26,-26,-41,12,70,-2,-41,63,-45,-51,49,
-23,-8,92,-14,29,5,-1,-50,48,28,38,14,-1,26,
17,-22,53,13,29,19,43,36,19,-23,-27,25,-51,20,
-68,-37,-14,-63,57,-62,33,70,-18,-9,52,4,-29,-10,
-4,32,52,-18,27,28,-48,-63,60,-44,31,47,-18,-12,
-15,-58,24,-36,-64,-34,-17,-33,17,-37,-19,-53,-27,30,
-16,61,-43,-31,40,-24,87,16,-16,-21,-13,-30,-9,-10,
-2,29,51,25,-12,-21,-11,-19,24,38,31,-53,-47,-9,
-22,-1,-21,-19,10,-61,33,0,-79,11,36,-28,28,54,
42,64,-21,11,63,26,50,52,-23,5,43,-16,-52,47,
26,-7,6,-32,-26,26,-60,29,53,17,-47,15,-30,-48,
-46,13,-22,-39,-82,-73,25,7,25,-11,1,-21,37,71,
21,46,24,28,65,62,30,6,14,63,41,-14,57,71,
7,25,52,22,-42,30,-26,-38,-40,-61,29,3,72,-44,
-40,13,12]; fc_w7 = np.asarray([fc_w7]);

count = 0
for i in range(0,507):
    if fc_w7[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w7[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w7[0][i]))+";")  
    count +=1 

fc_w8 = [6,-13,61,60,-30,4,-40,-75,-42,-51,50,-8,27,-31,46,-50,-27,26,
20,33,-27,-41,-3,-46,-34,-10,-53,-63,25,47,1,-5,-23,-42,14,-6,
40,-35,-14,29,75,-8,-45,-89,-16,-12,17,21,-68,10,-47,18,-32,18,
-32,-35,15,-37,-32,34,5,-1,25,-50,35,26,42,-30,-22,-42,-4,12,
-49,-58,-39,-9,46,-23,-25,19,-59,-41,-10,-57,36,-22,-3,-59,-49,35,
-24,-23,-4,-15,64,-43,-34,-29,23,8,-20,49,41,-18,31,-22,25,-22,
-20,30,29,-11,-50,46,19,-52,56,48,-80,11,-28,13,4,21,15,-19,
-23,18,-32,47,48,38,61,33,15,5,25,-31,0,17,-21,2,19,-46,
-18,27,0,-28,-38,13,-37,68,-50,35,42,-53,-40,-20,-45,33,-26,7,
-24,-23,5,32,40,-53,-64,15,-3,-39,5,-11,36,18,7,1,25,46,
-20,-4,-29,30,18,7,42,20,18,7,49,-3,-11,36,-5,18,20,-19,
-53,3,-33,-10,63,-15,-65,29,11,-22,-28,-16,-37,22,6,-52,-10,-19,
-9,4,23,-3,-34,26,37,26,34,41,-13,-8,51,64,0,10,-31,-44,
-58,23,-43,-9,43,4,-3,-33,-38,-80,-29,-70,-38,36,5,-61,-22,-24,
-51,-1,-19,-13,-17,32,47,-17,11,-14,-47,0,-38,11,36,-12,-59,7,
40,-23,-66,-2,17,-37,33,-45,15,-25,-11,34,-14,23,-46,-62,12,44,
-25,62,-32,29,16,2,-7,-6,32,-61,-55,31,-26,-40,-20,2,-49,-10,
-9,49,-26,-41,-57,-39,17,25,-99,-42,7,2,-13,10,-20,15,-2,29,
48,-22,25,50,21,-34,21,29,-57,2,12,-52,-2,33,-46,4,-1,7,
-42,-34,-53,41,-11,29,-7,-18,-68,-49,-39,-56,-72,-40,35,15,-28,-45,
30,23,-38,58,-6,-36,40,44,-25,21,-14,-14,12,22,31,-1,42,-39,
-68,-8,17,63,42,-9,0,-2,-70,11,-37,52,-28,3,44,21,-10,19,
-45,18,-66,-41,24,-59,-28,15,-40,-25,-17,-38,2,68,-3,13,-24,46,
44,-7,53,9,38,0,-18,5,-52,42,-35,56,-44,-12,12,-53,-6,31,
22,-9,25,-56,30,-35,-63,21,9,-25,41,-5,-42,51,16,10,-9,-30,
-20,31,7,-6,-1,-29,43,8,-24,-6,-2,-21,-8,50,-13,-52,-41,1,
59,-6,46,53,-26,-76,30,43,-73,-2,-50,-38,13,-27,-32,6,-39,-38,
-55,-1,19,15,-2,-24,-8,-76,-74,13,22,40,14,-73,8,-51,-15,16,
-62,38,-57]; fc_w8 = np.asarray([fc_w8]);

count = 0
for i in range(0,507):
    if fc_w8[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w8[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w8[0][i]))+";")  
    count +=1 

fc_w9 = [-26,-3,30,22,2,-77,-29,45,-31,-60,37,-26,60,-31,-55,-5,-56,-87,
25,22,13,2,24,6,-72,-52,-12,-39,4,-29,-33,29,-21,10,6,-5,
20,-24,6,-41,-72,-43,-40,33,-27,-43,13,-58,31,-41,-54,-36,-2,42,
-34,-86,-39,-65,12,-9,-45,-76,-53,-34,-54,-49,-26,-25,-43,26,-53,23,
-71,5,-73,48,-50,39,-30,-33,15,48,24,-53,-54,22,-10,-25,-11,-6,
-51,11,29,-34,32,24,-15,19,19,-54,55,38,-40,-10,23,-10,-25,25,
-6,-5,-33,-68,-81,8,5,-72,-82,18,-11,-28,-31,-41,18,-37,-46,6,
19,-5,43,-43,2,24,33,27,28,-50,49,34,-45,-7,3,-34,3,3,
-56,-58,-30,-18,31,-45,-55,-5,22,-60,-68,-11,-22,-13,23,55,-30,5,
56,4,17,60,-15,-16,42,59,-32,-8,29,36,36,46,10,4,35,15,
-33,-3,11,20,-44,11,13,-6,4,-15,-67,19,-11,-48,-73,40,-43,-18,
-33,1,-25,1,-29,26,72,-22,48,59,3,8,16,7,35,-42,38,10,
-90,56,-7,2,-31,61,4,-40,-55,31,26,-60,-36,31,-24,-85,-16,-88,
8,-63,24,-15,45,45,47,54,-84,-52,2,-54,-11,34,-34,-21,-18,8,
-22,-21,17,3,19,38,44,-25,34,6,-2,-27,32,-34,-16,22,-41,-24,
-51,-58,59,-22,16,21,15,-44,-61,33,56,-15,-32,2,-1,-47,-6,15,
-60,33,5,12,-13,-3,-56,-14,-10,8,45,2,-3,-24,5,9,20,-88,
32,-74,-3,-78,-50,-70,46,28,-35,-50,-5,-35,31,-13,-57,-49,9,-58,
-18,26,-71,-29,10,17,17,57,21,46,-10,48,16,-46,-16,49,-50,-2,
30,-48,-60,28,3,30,-15,6,-27,-41,-44,-34,-59,15,-29,-28,56,9,
25,-23,5,-22,-6,-28,-40,-38,-9,4,-26,-14,-16,37,28,20,-24,-19,
11,35,-10,30,-8,-16,-19,-19,-1,-5,-11,-18,-38,35,-58,9,-47,-67,
19,-44,7,-21,-58,23,7,-36,40,-20,-20,54,10,22,-26,14,-1,8,
-39,34,-23,-24,18,32,7,2,11,-37,-25,6,57,61,42,-18,-9,-45,
53,0,19,-22,24,1,35,1,-14,8,6,-24,43,-3,7,16,50,21,
-28,-8,-54,-31,-19,-29,-5,53,-44,-26,15,56,24,47,4,-26,-58,-9,
30,-16,-18,42,30,55,21,59,5,8,14,19,29,11,8,-26,-1,63,
-28,-2,-38,-21,-16,-47,57,-17,19,9,46,24,-5,21,54,20,-16,75,
2,80,11]; fc_w9 = np.asarray([fc_w9]);

count = 0
for i in range(0,507):
    if fc_w9[0][i] < 0:
        print("data["+str(count)+"] = "+"-8'd"+str(-1*int(fc_w9[0][i]))+";")
    else:
        print("data["+str(count)+"] = "+"8'd"+str(int(fc_w9[0][i]))+";")  
    count +=1 


fc_W = \
[ fc_w0, fc_w1, fc_w2, fc_w3, fc_w4, 
  fc_w5, fc_w6, fc_w7, fc_w8, fc_w9 ];                     # tableau de poids

fc_b = \
[ -48, 1081, -146,  -256, -109, 976, 31, 466, -905, 33];                       # tableau de bias


scale = 0.04700295254588127;                               # quant_dense/BiasAdd
M_fc  = (7.873913273215294e-05) / scale;                   # (quant_dense/BiasAdd/ReadVariableOp)/(quant_dense/BiasAdd)--> (S1*S2)/S3 --> Sbias/SBiasAdd
shift = c_int(); M0 = c_int();      
monbib.QuantizeMultiplier( c_double(M_fc), byref(M0), byref(shift) );
print("M_fc= ", M_fc, "M0= ", M0.value, "shift= ", shift.value);
offset_ent =  1;                                           # input_offset  =  -zero_point de l'entrée    quant_flatten/Reshape
offset_sor = -1;                                           # output_offset =   zero_point de la sortie   quant_dense/BiasAdd
offset_fil =  0;                                           # output_offset =   zero_point des paramètres quant_dense/BiasAdd
full_vec =  full_np(flatten_aux, fc_W, fc_b, M0.value, shift.value, offset_ent, offset_sor, offset_fil, verbose=1);
print(full_vec);
#sys.exit(0); 
