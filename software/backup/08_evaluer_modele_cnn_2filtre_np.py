import matplotlib as mpl
mpl.rcParams['legend.fontsize'] = 12;
mpl.rcParams['axes.labelsize']  = 12; 
mpl.rcParams['xtick.labelsize'] = 12; 
mpl.rcParams['ytick.labelsize'] = 12;
mpl.rcParams['text.usetex'] = True;
mpl.rcParams['font.family'] = 'sans-serif';
mpl.rcParams['mathtext.fontset']    = 'dejavusans';
mpl.rcParams['text.latex.preamble'] = [r'\usepackage{mathrsfs}'];
mpl.rcParams.update({'font.size': 12});

import matplotlib.pyplot as plt
import numpy as np
#np.set_printoptions(threshold=sys.maxsize) # Printing all the weights

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'; # TF debug messages
# 0 = all messages are logged (default behavior)
# 1 = INFO messages are not printed
# 2 = INFO and WARNING messages are not printed
# 3 = INFO, WARNING, and ERROR messages are not printed

import sys
import tensorflow as tf
from tensorflow import keras

from ctypes import *
from mes_fonctions import *


print(" \n ");
print("************************************** ");
print(" Testing fonctions en CPP avec ctypes  ");
print("************************************** ");
monbib = CDLL("mes_fon_CPP/monbib.so");                    # Bibliothèque CPP
print(monbib); monbib.print_cpp();


def eva_model(img_test, verbose):
  ''' Cette fonction fait evaluation de l'inference 
      d'un modèle CNN avec 12 filtres pour classifer
      la base de données Mnist. Il rendre le valeur
      estimée de la clasification (i.e. la prediction).
      img_test: tableau Numpy de entrée (uint8).
      predict:  Prediction avec le modèle.                 '''
   
  if (verbose == 1):                                       # Imprimer tout
    np.set_printoptions(threshold=sys.maxsize);

  print(" \n ");
  print("************************************** ");
  print(" Quantization de l'image               ");
  print("************************************** ");
  scale = 0.04896376;  zero_point = -6;                    # sequential/quantize_layer
  img_test = quant_np(img_test, scale, zero_point, verbose=1);
  #print(img_test);
  #sys.exit(0);    

  print(" \n ");
  print("************************************** ");
  print(" Convolution                           ");
  print("************************************** ");
  entree = img_test;


  scale = 0.04697321355342865;                               # quant_conv2d/BiasAdd
  offset_ent =  6;                                           # input_offset  =  -zero_point de l'entrée  quant_reshape/Reshape
  offset_sor = -1;                                           # output_offset =   zero_point de la sortie quant_conv2d/Relu


  con_f0 = \
  [[  29,  59,  32],
   [ -19, -102,-64],
   [  15,  81,-126]]; con_f0 = np.asarray(con_f0);           # filtre 0 conv2d
  con_b0 = -1582;                                            # bias   0 conv2d           
  M_b0   = 3.4735789e-05 / scale;                            # (quant_conv2d/BiasAdd/ReadVariableOp)/(quant_conv2d/BiasAdd)--> (S1*S2)/S3 --> Sbias/SBiasAdd
  shift = c_int(); M0 = c_int();      
  monbib.QuantizeMultiplier( c_double(M_b0), byref(M0), byref(shift) );
  print("M_b0= ", M_b0, "M0= ", M0.value, "shift= ", shift.value);
  mc_0 = conv_np(entree, con_f0, con_b0, M0.value, shift.value, offset_ent, offset_sor, verbose=1);  print(mc_0);

  con_f1 = \
  [[ -94,  78, -52],
   [ 127, -64,  86],
   [ -13,  50,   7]]; con_f1 = np.asarray(con_f1);           # filtre 1 conv2d
  con_b1 = -3184;                                             # bias   1 conv2d  
  M_b1   =  3.4716613e-05 / scale;                            # (quant_conv2d/BiasAdd/ReadVariableOp)/(quant_conv2d/Relu)--> (S1*S2)/S3 --> Sbias/Srelu
  shift = c_int(); M0 = c_int();      
  monbib.QuantizeMultiplier( c_double(M_b1), byref(M0), byref(shift) );
  print("M_b1= ", M_b1, "M0= ", M0.value, "shift= ", shift.value);
  mc_1 = conv_np(entree, con_f1, con_b1, M0.value, shift.value, offset_ent, offset_sor, verbose=1); # print(mc_1);

  print(" \n ");
  print("************************************** ");
  print(" MaxPooling (2,2)                      ");
  print("************************************** ");
  mp_0  = maxpool_np(mc_0,  verbose=1);
  mp_1  = maxpool_np(mc_1,  verbose=1);

  print(mp_0);  print(mp_1);
  #sys.exit(0); # Terminer l'execution


  con_aux0  = np.zeros([13, 2]); con_aux1  = np.zeros([13, 2]); con_aux2  = np.zeros([13, 2]);
  con_aux3  = np.zeros([13, 2]); con_aux4  = np.zeros([13, 2]); con_aux5  = np.zeros([13, 2]);
  con_aux6  = np.zeros([13, 2]); con_aux7  = np.zeros([13, 2]); con_aux8  = np.zeros([13, 2]);
  con_aux9  = np.zeros([13, 2]); con_aux10  = np.zeros([13, 2]); con_aux11  = np.zeros([13, 2]);
  con_aux12  = np.zeros([13, 2]); 



  # con_aux
  con_aux0[:, 0] = mp_0[0,:]; con_aux0[:, 1] = mp_1[0,:];
  con_aux1[:, 0] = mp_0[1,:]; con_aux1[:, 1] = mp_1[1,:];
  con_aux2[:, 0] = mp_0[2,:]; con_aux2[:, 1] = mp_1[2,:];

  con_aux3[:, 0] = mp_0[3,:]; con_aux3[:, 1] = mp_1[3,:];
  con_aux4[:, 0] = mp_0[4,:]; con_aux4[:, 1] = mp_1[4,:];
  con_aux5[:, 0] = mp_0[5,:]; con_aux5[:, 1] = mp_1[5,:];

  con_aux6[:, 0] = mp_0[6,:]; con_aux6[:, 1] = mp_1[6,:];
  con_aux7[:, 0] = mp_0[7,:]; con_aux7[:, 1] = mp_1[7,:];
  con_aux8[:, 0] = mp_0[8,:]; con_aux8[:, 1] = mp_1[8,:];

  con_aux9[:, 0] = mp_0[9,:]; con_aux9[:, 1] = mp_1[9,:];
  con_aux10[:, 0] = mp_0[10,:]; con_aux10[:, 1] = mp_1[10,:];
  con_aux11[:, 0] = mp_0[11,:]; con_aux11[:, 1] = mp_1[11,:];

  con_aux12[:, 0] = mp_0[12,:]; con_aux12[:, 1] = mp_1[12,:];



  '''
  # con_aux
  con_aux0[:, 0] = mp_0[0,:]; con_aux0[:, 1] = mp_1[0,:];
  con_aux1[:, 0] = mp_0[1,:]; con_aux1[:, 1] = mp_1[1,:];
  con_aux2[:, 0] = mp_0[2,:]; con_aux2[:, 1] = mp_1[2,:];

  con_aux3[:, 0] = mp_0[3,:]; con_aux0[:, 1] = mp_1[3,:];
  con_aux4[:, 0] = mp_0[4,:]; con_aux1[:, 1] = mp_1[4,:];
  con_aux5[:, 0] = mp_0[5,:]; con_aux2[:, 1] = mp_1[5,:];

  con_aux6[:, 0] = mp_0[6,:]; con_aux0[:, 1] = mp_1[6,:];
  con_aux7[:, 0] = mp_0[7,:]; con_aux1[:, 1] = mp_1[7,:];
  con_aux8[:, 0] = mp_0[8,:]; con_aux2[:, 1] = mp_1[8,:];

  con_aux9[:, 0] = mp_0[9,:]; con_aux0[:, 1] = mp_1[9,:];
  con_aux10[:, 0] = mp_0[10,:]; con_aux1[:, 1] = mp_1[10,:];
  con_aux11[:, 0] = mp_0[11,:]; con_aux2[:, 1] = mp_1[11,:];

  con_aux12[:, 0] = mp_0[12,:]; con_aux0[:, 1] = mp_1[12,:];
  '''



  print(" \n ");
  print("************************************** ");
  print(" Flatten                               ");
  print("************************************** ");
  flatten_aux = np.append(con_aux0, con_aux1);
  flatten_aux = np.append(flatten_aux, con_aux2);
  flatten_aux = np.append(flatten_aux, con_aux3);
  flatten_aux = np.append(flatten_aux, con_aux4);
  flatten_aux = np.append(flatten_aux, con_aux5);
  flatten_aux = np.append(flatten_aux, con_aux6);
  flatten_aux = np.append(flatten_aux, con_aux7);
  flatten_aux = np.append(flatten_aux, con_aux8);
  flatten_aux = np.append(flatten_aux, con_aux9);
  flatten_aux = np.append(flatten_aux, con_aux10);
  flatten_aux = np.append(flatten_aux, con_aux11);
  flatten_aux = np.append(flatten_aux, con_aux12);

  #print(flatten_aux); 
  #print(len(flatten_aux));  print(flatten_aux.shape);
  flatten_aux = np.expand_dims(flatten_aux, axis=0); print(flatten_aux); 
  #print(len(flatten_aux));  print(flatten_aux.shape);
  #sys.exit(0); # Terminer l'execution


  print(" \n ");
  print("************************************** ");
  print(" Full connected                        ");
  print("************************************** ");

  fc_w0 = \
   [[  -28,   6, -40,  39,  34, -13, -12, -33, -28,  33,  26,  -4,   5, -45, -44,   1, -60, -10,
       -50, -56, -67,  18, -62,  23, -62,  -6, -29, -35, -10,  -2, -93,   7, -39, -55, -35,  45,
        -7, -44,  37, -24,  85,  30,  31,  30,  66, -29,  28,  12, -42,   9,   3,   4,  78, -41,
       -46,  40,  25, -19, -49,  61, -66, -42,  26, -43,  23,  52,   9, -42,  -4,  42, -52,  38,
        52, -49,  19,  31,  17, -73,  23, -15,  45, -76, -24, -48, -12,  40, -54,   7,  49,  -8,
        52,   0, -32,  -7,  61,  78, -60,  49,   1,  20,   8,  27, -72, -28,  17, -40,   3, -71,
       -22,  51, -15, -15,  23,   1, -27,  29,  20,  14, -21, -45, -38,   8, -59,  57, -49, -39,
        -7,  16,  -4,   1, -35,   5,  41,  39, -49, -35, -29, -42,  15,  70,  50, -55,  59,  27,
         3, -52,  34,  -6,  -3,  -9,   5,   8,  26,  42,  58,   1,   4, -82, -80,  34,  29,  66,
       -13,  52, -27,  27,  58, -29,  14, -46, -55, -66, -28,   0, -23, -34,  67,   7,  67,   1,
        41,  45, -49,  25, -20,  14,  -8, -10,  40, -21, -34,  56,  12, -32, -14, -84, -28, -31,
       -46, -60,  52,  24,   8, -18,  86,  40,  19,   5, -71, -54,  -9, -46, -24,  26, -20,  52,
        34, -29,  70, -32,  17, -39,  23,   6,  -3,  50,  49,  29,  10,  34, -34,   8,  -1, -49,
       -12, -13, -31,  38, -32,  24, -41,  31,  58,  16,  72,  63,  16,  72, -23, -22, -37,  -2,
         6, -20, -42,  33,  36, -46,  -8,  28,   0,  29, -18,  26, -23,  45, -88,  -2,   1, -42,
        20, -15,  -6,  -2,   5,  64, -49,   2,  28, -60,  35,  -3,  -7, -43,  33, -53,  13,   2,
       -91, -59,  11,  -2,  17,  23,  72, -10, -14,  19,  -8,  52,  -5,  11,  32, -32, -46, -42,
       -13,   8,  70, -62,  13,  30,   7,  28,  38, -17, -27,  13, -10, -31,  15, -81,  -1, -26,
       -42, -62,  30, -41,  51, -20, -26, -44,  25,   4, -24,  19,  28,  55]]; fc_w0 = np.asarray(fc_w0);


  fc_w1 = \
   [[  -46,   62,  -41,   23,   -2,   30,   58,  -35,  -41,   35,   53,    9,    9,    2,
       -46,   60,  -69,   31,  -36,  -45,  -77,   -2,   22,   10,   60,    2,  -37,   87,
       -13,   48,    0,    2,   36,   24,   -8,   21,   64,   -3,   17,   37,   18,   38,
        45,  -13,  -20,   43,  -31,   74,  -31,  -11,  -80,  -15,   -7,   -8,   58,  -41,
       -42,    3,  -50,  -35,  -64,  -49,  -54,   49,  -15,  -37,   21,  -59,  -38,   29,
        -9,  -27,   -1,  -17,  -41,   44,   14,   41,  -34,  -54,   27,   -9,    1,  -49,
       -32,  -14,   -9,  -63,  -19,    5,    3,   59,   63,   18,  -10,    9,   30,   -4,
       -29,    2,  -10,    2,  -41,  -50,   61,   54,  -29,  -65,  -18,   51,   33,  -39,
         9,    2,  -17,  -48,  -72,   52,   -1,   83,   34,   51,  -22,  -47,  -11,   19,
       -80,  -15,    7,   22,  -42,   61,   47,   -9,  -58,  -50,   -6,  -24,   60,  -32,
        -1,    2,  -94,   -7,   76,  -13,  -51,   20,   58,   47,  -12,   -5,    3,  -41,
       -48,  -33,  -17,  -56,  -37,   47,   60,  -10,  -12,    0,   39,  -77,    6,   52,
        41,    7,   82,   48,   24,  -58,  -46,  -63,  -44,   31,   11,  -12,   29,    1,
        10,  -43,   24,  -45,  -50,   -8,  -32,  -25,   27,   14, -102,  -28,   61,   53,
        75,   36,  -24,    0,  -81,  -38,   -9,  -37,   -3,  -42,   48,  -28,  -44,    6,
        47,  -49,  -81,   11,  -46,  -31,  -56,   28,  -17,   45,   44,  -12,   22,  -52,
        -4,  -27,  -55,   -4,  -18,   54,   26,  -40,  -41,  -38,   68,   37,  -10,   25,
       -91,    8,  -82,  -54,    8,    2,   33,   51,   -6,   46,   15,   39,  -52,  -28,
        53,    5,   22,  -23,   39,    8,  -44,   24,   61,   18,  -57,  -27,  -27,   61,
        72,   39,  -50,    7,   -3,  -39,  -31,  -13,   13,  -53,   64,   -4,  -17,  -30,
       -26,  -16,  -42,  -68,   46,  -40,   13,  -13,   52,  -29,  -16,  -36,   15,   19,
        27,   -6,  -52,    6,  -51,    3,   17,   39,   51,    2,   82,   42,   71,    8,
       -58,  -49,   -7,   -3,   43,   64,  -38,    7,   31,  -17,   27,   30,  -10,   -8,
        11,   28,  -22,   18,   31,  -32,   38,  -74,    9,  -47,    3,    4,   72,  -57,
        51,   47]]; fc_w1 = np.asarray(fc_w1);


  fc_w2 = \
   [[  41,   10,   19,  -35,   59,  -21,   36,   29,   31,   22,   10,   72,  -21,   63,
       10,  -10,   26,   49,   47,  -50,   22,    2,  -45,  -22,  -25,  -23,   13,  -28,
      -44,    1,   -1,   -6,   77,  -18,  -16,    6,   -6,   26,   54,   -5,   27,   46,
      -65,   60,   34,  -15,   63,  -37,  -16,   -7,  -58,   13,   30,   -9,   48,  -14,
       30,   10,  -18,  -15,   59,   58,  -37,   -1,   -5,   15,  -39,  -14,  -58,    5,
      -17,    6,   43,   -7,   30,  -48, -101,   29,   41,   28,   72,   24,   22,  -23,
       15,   -1,   15,  -43,   -7,   42,   19,   25,   38,    6,  -32,   51,  -36,  -40,
       65,  -40,  -46,   32,   -2,    9,  -30,   56,   27,  -46,   63,   27,  -35,   19,
      -18,   -4,  -21,  -60,  -43,  -81,   -3,   22,   -2,   18,   28,   17,   24,   15,
       26,   20, -102,  -67,  -12,  -64,   90,  -62,   50,  -83,    8,  -81,  -29,  -67,
       59,   13,   42,  -13,   53,   10,   11,   24,  -48,  -29,   43,  -10,  -71,   10,
       22,  -29,  -71,   21,   41,   14,  -27,    5,  -74,  -17,    6,    0,  -66,   -7,
        3,   -6,  -49,   34,   26,  -38,  -15,   32,   -9,   29,  -28,  -33,  -15,   28,
      -29,   76,  -68,  -11,   19,  -35,  -24,   49,   31,  -13,  -18,   -3,    1,   58,
       27,    2,   -3,  -20,    6,  -11,  -32,  -39,  -44,   73,   22,   51,   11,   -9,
      -62,   54,    6,  -14,   48,  -15,   42,   28,  -18,   52,   71,   -8,   -5,   11,
      -24,   39,   77,  -34,   68,   83,  -18,   15,   82,   26,   56,   -2,   13,  -15,
       25,   25,   64,  -34,  -32,   83,   25,  -32,   35,    0,   15,   -4,   -9,   68,
       15,   26,   40,    0,    9,    6,   69,   31,  -53,    8,   77,  -36,   29,   15,
       63,   65,  -21,  -26,   45,   38,   -4,   24,   59,  -75,  -27,   20,  -49,   42,
        1,    7,   23,   -9,    8,   62,   44,   47,   37,   17,   51,    7,  -22,   10,
        0,    5,  -26,  -83,   -3,   32,  -27,   16,  -10,    3,   19,   17,    4,    3,
       78,   57,  -41,   57,   18,   19,    2,  -52,  -40,  -23,  -82,  -49,   22,   25,
       23,  -78,  -33,   23,   17,  -58,   31,  -23,  -35,   20,  -40,  -36,  -20,   59,
       89,  -11]];  fc_w2 = np.asarray(fc_w2);      


  fc_w3 = [   46,  -59,  -71,   54,  -43,   55,   32,  -39,   45,   41,   41,   -2,  -43,  -24,
       36,   44,   42,   54,   33,  -65,   65,  -49,   29,   27,  -66,   36,   -3,    1,
       19,  -42,  -30,  -35,  -12,   33,   28,    0,  -23,   -5,  -36,   59,  -37,  -34,
       35,    3,   -1,   50,   44,  -47,  -74,  -29,  -93,  -23,   12,    8,    1,   42,
      -28,   60,   -9,   23,  -14,  -28,    1,  -14,   39,   49,    3,  -37,  -75,   51,
       15,  -27,  -29,  -33,  -86,   24,  -58,   -9,  -13,   12,   16,   59,  -21,  -14,
       54,  -40,   84,    7,   34,   22,   -7,  -43,   43,   70,  -39,  -25,  -85,   13,
       12,   16,  -22,  -37,  -14,  -43,   34,   13,  -20,    2,   41,  -10,   33,   16,
       43,  -73,   11,  -31,   31,   65,   11,   38,   -2,   76,   28,  -32,    0,   40,
       -2,  -68,  -56,    9,    5,  -46,  -10,    8,   95,  -72,   72,   -6,  -11,   14,
      -39,    9,  -56,  -18,   24,   41,   10,    9,   -6,   22,   32,    2,   31, -102,
       38,   25,   45,  -47,   92,  -22,  -17,  -59,  -26,  -58,  -43,   15,   47,  -30,
       18,   58,  -42,    1,   51,   -9,   11,  -19,  -42,   35,  -14,  -79,  -27,   55,
        5,   66,  -25,  -17,   77,   35,   49,  -29,   12,  -18,   -5,  -51,   27,   19,
       47,  -43,  -11,    0,  -34,   54,  -95,   44,  -58,  -16,  -41,  -15,   66,   61,
       62,   63,   29,  -41,   -5,   22,   52,  -31,   37,   13,   53,   10,  -19,  -15,
      -14,   16,  -14,   27,    8,  -46,   29,    6,  -34,  -50,   -2,  -12,   67,   27,
       25,   25,  -18,  -33,  -43,   50,   14,  -41,  -28,    2,  -31,   43,   48,   44,
        1,   25,  -44,   44,   59,  -77,   -6,  -61,   26,    4,   58,    4,   26,  -12,
       98,   31,  -48,   48,  -33,  -15,   -5,  -25,   41,  -26,  -71,   54,  -40,  -40,
        9,  -31,  -47,  -44,  -80,   31,  -20,  -17,   47,   75,   78,   29,   13,  -29,
       -2,   66,    5,   -2,   19,    8,  -31,   52,  -24,   21,  -26,   -5,   27,    2,
       -8,   23,   40,  -14,  -41,   55,   55,   34,   13,   41,  -29,   60,   10,   65,
        0,   77,   -2,    0,   62,   32,  -18,   34,  -66,   29,  -31,   41,  -16,   10,
      -45,   29]; fc_w3 = np.asarray([fc_w3]);     


  fc_w4 = \
   [[  47,   38,  47, -19,  31, -51,  36, -12, -65, -85,  13,  28,  -3, -80, -60, -28,  52,  17,
      -60,  -42, -52,  -4, -56, -58,  59,  22, -51, -52, -47,  42, -22,  35,  88, -47,  59,  15,
      -22,   21, -11,  13, -27, -48,  85, -24,  63,  22,  13,  62,  50,   0,  66, -37,  -9, -25,
       30,   49,  34,  -2,  96, -23,   1,  15, -22,   5,  25, -51,  13, -29,  52, -32,  44, -25,
       20,  -36,  25,  30,  24,   7, -76,  40, -26,  43,  45,  -9,   0,  31, -39, -15,  -5, -21,
        2,   27,  24, -58,  -8, -54,  47,  12,  -9,  19, -17, -29,  55, -32, -83, -30, -91, -66,
      -19,  -40, -12, -30,   6,  17, -14,   9, -58, -30, -40,  41,  44,  22, -31,  16,  29, -53,
       33,  -44,  20,   7, -75,  16, -87,  36,  16,  62,   0,  58,  20,  51,  -3,  73, -61, -50,
      -52,   79,  28,   3,  17,  -7,  72, -12, -27,  -5, -25, -31,  -7,  34, -33,   2, -73, -20,
       30,   12, -30,  81,  32,  -8, -58,  -2, -51,  70,  21,  30, -21,  37,  48, -22,  11,  30,
      -12,  -66, -12, -34, -30, -24,  51, -17,  29,  47, -14,  39,  60,  30, -83,  32,   8, -15,
       26,  -23,   6,   5,   3, -24,   1,  37, -17, -26,   6, -30,  26,   3,  36,  19,   7,  31,
      -17,  -40,  26,   6,  30,  29,   4, -12,  52,  47,   3,  34,  54, -52, -54,  29, -10,  25,
       34,    0,  19,  38,  26,  29, -44, -46,  31, -27,  43,  17,  46,  -9,  25,   1, -24, -10,
      -12,    0, -61, -57, -61,  24, -75, -42, -54, -48,  30,  40, -87, -48, -17, -57,  33,  -1,
      -45,   10, -58,  12,  29, -23,  17, -26,   6, -55, -44,  62, -71, -40, -40,  45, -25, -53,
       36,   45, -46,  38, -12,  15,  -5,  23, -16, -12, -39, -35, -50,  29, -12,  37,  36, -53,
       47,   39, -46,  52,  22, -24,  21,   9,  51,  26, -31,  21, -30, -23,  46,  30, -46, -58,
       58,    6,  -1, -51,  68, -41,  13,  10, -39, -58, -33, -59, -54,  47]]; fc_w4 = np.asarray(fc_w4);


  fc_w5 = \
   [[ -38,  -52,    3,   21,  -61,   54,  -21,  -20,  -41,  -45,   49,   21,    2,  -31,
       25,  -23,   70,   13,   35,  -28,   20,  -18,    3,  -18,   54,  -31,  -15,   41,
      -52,  -26,   25,  -38,  -33,   37,  -36,  -21,  -25,  -11,  -24,   24,  -68,    1,
      -29,   29,  -40,   30,  -41,   37,    6,    6,  -40,   40,   62,  -71,   12,  -60,
      -64,   14,   -9,   21,   -5,  -21,  -16,   15,   17,   36,   10,  -48,  -16,    9,
      -14,   53,   10,   -4,   75,  -18,  112,   31,  -45,  -12,   18,   20,  -59,   -5,
      -17,   33,   14,    7,   28,    0,   18,   -6,   47,   14,   48,   18,  -29,   28,
      -18,   43,   92,    0,   93,   12,  -54,  -19,  -68,  -57, -127,  -21,  -52,  -23,
       13,  -18,   41,   33,   37,   52,    2,   -4,  -47,   -3,    2,  -28,   24,    5,
       37,   70,   79,   81,   28,  -11,   14,   -7,  -61,  -20,   37,  -20,   -9,   44,
       95,  -21,   -8,   49,   33,   -5,   42,  -14,  -17,   39,  -28,  -42,  -26,  -42,
       97,   -1,   34,   -2,   48,   29,   21,  -45,   45,   43,   -7,    0,   44,   23,
       25,   34,   -6,    9,    6,   -6,  -51,  -19,   29,  -19,  -82,   48,  -85,  -12,
      -17,   44,   39,  -61,   30,  -10,    7,  -55,   26,    0,   -7,    9,  -43,  -51,
       39,  -34,  -54,  -35,  -28,   25,  -14,   -8,   12,   12,   20,  -63,  -13,  -59,
      -21,   65,  -25,  -29,  -39,  -20,   50,  -59,    8,   17,   -5,  -29,  -21,  -23,
        6,   24,   17,   33,   33,  -12,   56,   13,  -35,   30,  -52,    2,   51,  -38,
       75,  -22,   52,   50,  -34,    4,   15,   17,   32,   -9,   10,   47,   26,  -38,
       -7,   -7,   27,  -24,  -40,   51,  -10,   11,  -46,   43,    2,   22,   50,   22,
       45,  -56,  -20,   10,   50,   15,  -51,   -2,   -1,  -16,   12,   17,   50,  -29,
       -6,    6,   61,  -18,  -56,  -44,   31,  -52,  -21,  -44,  -37,   17,   38,    8,
       17,   35,  -35,    0,   30,   17,  -47,   44,   11,  -24,   57,  -27,   21,   36,
      -23,   -6,   33,   49,   16,   53,  -17,   53,  -56,   21,  -50,  -51,   20,   15,
      -39,  -24,   22,   -1,   31,   -2,   30,   34,   21,   26,  -31,  -29,   15,  -43,
      -12,  -88]];  fc_w5 = np.asarray(fc_w5); 


  fc_w6 = \
   [[ -8,  52,  17,  64, -50, -16,   7,  72,  42,  34,  14,  80,  45,  59,  26,  13,  55,  61,
      76, -21,  21,  -8,  29,  24,  52,  64, -17,  12,  75,  46, -70,   2,  54,  42, -31, -12,
     -35, -31,  10, -29, -38,  39,   4, -19,  83,  41,  23,  73,  33,  -3,  65,  -1,  28, -67,
       9,  36,  37, -12, -51, -23, -18,  30,  30, -39, -38, -53,  -7,  -8, -20, -42, -13, -20,
       8,  37,  18, -44,  42,  33, -64,  11,  -7, -64, -48, -42,  16,  16, -36, -68,  29,  47,
      72,  12, -19, -40,  13, -60, -18, -50, -29, -39,  34, -29, -63, -24, -65,   2,   9,  27,
      16, -34,  36,  13, -13,  11, -29, -54, -32,   3,  43,  -2,  22, -31, -30,  36,  45, -25,
      41,   4, -90, -33, -55, -42, -39, -31, -67, -34,  28,  40,  36,  45, -22,  47, -47, -66,
      38,  43,  -7,  22,  19,   3, -49, -14,  13,  49,  21,  -2,  41,   6, -16, -22, -30,  27,
      37,   4, -51,  38,  33,  36,  -6,  14, -14,  33,   9,   6, -87,  14,  41,  26,  39,  52,
     -35, -51, -70, -58, -36,  22, -20, -55, -31,  20,  -2,  32, -73,  17, -24, -21,  14,   0,
     -18,   2,  -8,  46, -32, -65,  35,  36, -64,  17, -36,  41, -72, -66, -70,   3,  29, -30,
     -40,  36,  53,  41,  57,  63,   7, -35, -42,  20,  21, -18, -39,  53,  10,  -8, -67, -45,
     -38,  34, -56, -23, -34,  -2,  37, -11,  20,  58,  34,  61,  10, -10, -43,  79,  16,  -4,
      81,  14,  -7,  40,   8, -35,  53, -23,  -5,  19, -88, -79, -40, -26,  -1, -42,  22,   8,
      45,  -7,  25,  30,   0,  -5,  23, -29, -30, -26,   8,  -7, -64,  39, -26, -13,   5, -50,
     -21, -10,  31,  38, -20, -74, -26, -47, -22, -18,  67,  -4, -28,  22,   2,  27, -37, -22,
      31, -26, -50,  -7, -24, -69, -61,  36, -46,  22,  37, -26, -77,  54, -80, -66,   1,   0,
      13, -73, -43,  47,  14, -50, -22,  41, -29, -47,  21, -71,  60,  -8]]; fc_w6 = np.asarray(fc_w6);


  fc_w7 = \
   [[ 33, -25, -13,  43,  17, -75, -64, -60, -68,  27, -47,   6, -77,  17, -34, -29, -62, -27,
      22, -30,  60, -37, -39, -68,  52,  59,   9,  42, -12, -14,  30, -63,  47, -56, -56,  31,
     -19,  23, -79,  13, -32, -69, -29,  28,  -7,  11, -48, -33, -31, -31,  23,  39, -32, -40,
       6,  61,  60, -17,  72,  79,  56, -34,  -4,  30,  -9,  45, -29, -53,  -1,  29,  10, -44,
      -3,  11, -17, -35, -23,  21,   4,  71, -20,  56,   8, -22, -14,  10,  73, -18,  20,  62,
      13,  56,  11,  38,   8,  25,  25,  38,  -2,  26,  -1,  15,  11, -17,  52,  45,  -1,  37,
     -20,  54,  48, -43,  28,  11,  21,  25, -59,  -6, -16,  61, -28,  33,   7,  20,   7,  19,
     -63,   7, -96, -41,  57,  36,   1,  36,  45, -49,   1,  32,  14, -40,  51,   9,  38,  -6,
      51,  51,  71,  52,   5,  11,  -2,  21, -19,  25,  -3,  33,  73,  29,  71,  17,  34,  -1,
      25,  39,  38, -47, -28, -17, -39, -39, -10,  15,  76, -23, -15,  44, -25, -25,  43, -49,
     -27,  21,   1, -44,  20, -32,  45, -37,  65, -51, -31,  39, -96, -52, -34,  10,   2, -28,
      34, -26,  89,  50, -17,  59,  -3, -46, -23, -37,  51,  39,  -3,  -7, -40, -12,  62,  -4,
      10, -51, -37,  36,  51,  12, -33,  44,  29, -21,  35,  36, -34, -37,  29,  18, -19,  14,
     -24,  -9,  45, -72,  20, -32,   9,   5, -94,  10,  13, -41,  57,  -3,  -1, -30, -41, -37,
     -83,  13, -75, -13, -23, -87,  -7, -46,  59,  56,  10, -30, -78, -41, -12, -25, -83,  32,
      23, -30,   1, -31,  45,  50,  13, -17,  -9, -44, -96, -58, -45, -11,  63, -61, -17, -57,
     -25,  39,  30,  55,  22, -27, -34,  55, -22, -15, -29, -10, -65, -24, -63,   1, -35, -58,
     -46, -24, -95,  14, -34, -75, -48,  30,  41,   0,  71,  15, -38,  44,  -3,  -2,  -3,  42,
      20,   5,  45,  49,  21,  12,  19,  21, -20, -31, -38, -43, -11,  25]];  fc_w7 = np.asarray(fc_w7);    


  fc_w8 = \
  [[ -23, -67,  14, -14, -13, -15,  28,  20, -64,  39, -75,  31,   1, -24,  43, -45, -49,  48,
      45, -31, -46, -31,   4,  -9,  16, -16,  17,  49, -36, -38, -74,  18,  25,  22, -68, -25,
       1, -24,  39,  33,   3,  11,  -6,   8,  27,  31, -31,  28, -28, -10,  -9, -17, -28,   6,
     -40,  30, -17, -33,  -2, -50, -25,  29,   9,   5,  20,   2,  37,  18, -33,  13, -21,  35,
      21,  -2,  48,  11,  13,  22,  26, -45,  39, -36,   7,  30,  39,   4,  42,  -4,   4,  -4,
      27,  41,  26, -33,  17,  54, -43,  12, -31,  32,  16,   2,  13,  21,  38, -28, -73,  13,
     -43,  28,  43,   6, -26,  52,  11, -15, -23,  -2, -17,  20, -13,  18, -44,  17,  36,  48,
      -5,  41,   9,  18,  -4, -53, -18,  12, -63, -51,  31, -10, -53,  20,  23,   2,  12,  58,
      43,  26,  19,  -4,   5,  49, -41, -31,  60,  -7, -22,  38,   3, -15, -17, -31,  18,  23,
      -7, -58,   6,  30, -48, -23, -14,   4, -43,  43,  57, -31,  40, -27,  22,  35,  58,  10,
      35,  46, -42,  56,  33, -78, -28, -67,  -2,  -1,  34,  31, -46,  19,   2,  36,  21, -50,
      28, -50,  -2,  41, -29,  22, -78, -57, -52,   4,  15,  20, -32,  52, -29,  -2, -20, -46,
     -72,  39,  29, -19,  26, -19,  25,  14, -34,  -4,  -2,   6, -60, -37,  60,  16, -22,  57,
      -2,  -7, -31, -59, -47,  28,   5,  -3,  49,  -4,  19,  -3,  26,   0,   5, -37,  45,  21,
     -56,  34, -47, -37,  35, -18, -34, -61, -24, -25, -64, -10,   2,  -3,  12, -22, -10, -26,
      49,  37, -58,  -8,  23,   1, -28,  -4, -10, -36,  52,  -1,   4,  24, -72, -77, -31, -35,
      19,  11, -23, -64,  13,  34,   7,  -1,  29, -31,   9, -18, -28,  26,  13,  25,  19,  17,
     -19,  45, -14, -52,  -3,  45, -40, -36,   3,  -8,  -7, -22, -28, -78, -11, -52,  65,  10,
      33, -42,  32,  30,  22,  36, -20, -74, -26, -29, -44, -30,  13,  40]]; fc_w8 = np.asarray(fc_w8);


  fc_w9 = \
  [[  57,   19,   62,  -56,   -3,   -6,  -13,    8,  -75,   26,  -63,   23,    7,  -41,
     -49,  -22,  -12,   33,  -12,  -40,  -51,   -4,  -43,  -56,   64,  -51,   17,  -24,
     -44,  -60,  -77,  -11,  -31,    4, -100,  -11,    0,   52,  -24,  -56,  -45,   26,
     -57,  -31,   13,    9,  -29,  -51,  -40,  -56,   41,   46,  -13,   10,   53,  -43,
       4,   28,  -97,    3, -119,   29,   -3,   23,   12,  -13,   25,   54,   20,  -10,
      48,  -27,   50,   -3, -119,   15,  -74,  -42,   -1,  -57,   22,   26,  -35,  -44,
     -17,   29,  -34,  -44,   18,    5,   26,   58,   42,   37,   47,  -29,  -25,   36,
     -24,  -35,  -22,  -13,  -77,  -44,   -6,   19,  -32,  -49,  -72,   43,   -4,   21,
      59,   42,   10,   38,   -3,  -13,  -31,   34,    6,   37,   33,  -14,    3,   42,
      14,  -35,  -68,   37,  -52,   49,   35,   75,  -45,   12,   -7,  -34,   -5,   40,
       4,   -6,   -5,   13,    8,   46,  -12,   41,   36,   27,    1,  -22,  -47,   -9,
     -17,    5,  -18,  -65,  -17,   25,    3,   42,   30,   40,   -1,   26,   23,  -22,
     -30,   39,  -16,   28,  -11,  -20,   56,  -15,   57,   -9,   69,  -50,  -97,    4,
      41,   11,   27,  -42,   14,  -11,  -25,   25,   10,   11,  -30,    3,   -5,    8,
     -14,    5,    0,  -29,   23,  -17,   66,  -49,  -29,  -62,   13,   24,   32,  -61,
       2,   32,  -65,  -17,   -3,   -2,   29,  -31,   19,   15,   -7,  -16,  -18,   -2,
       9,    3,   18,  -14,   29,  -71,   -2,    1,  -82,  -43,  -78,   42,   -8,    1,
      50,   -2,    6,   10,  -14,  -34,   49,  -26,   87,    2,  -31,   25,  -49,  -34,
     -22,  -29,    0,  -11,  -47,   24,   14,    4,   41,   29,  -47,   49,  -41,  -35,
     -55,   -9,    2,   40,  -51,  -45,   41,  -55,    3,   -3,   39,  -33,   22,   34,
     -38,  -46,  -15,   21,   26,   -1,   39,   52,  -74,  -36,   -2,   34,   10,    6,
     -23,   44,   18,    9,  -54,   26,  -44,  -37,   -5,  -19,   -8,  -30,  -32,   51,
      16,  -39,   38,  -47,    4,  -40,  -58,   87,   -5,   63,  -42,   12,  -52,   25,
       8,   41,  -13,  -29,   30,   61,   59,   19,  -30,   49,   43,   36,  -46,  -21,
      26,  -20]]; fc_w9 = np.asarray(fc_w9);


  fc_W = \
  [ fc_w0, fc_w1, fc_w2, fc_w3, fc_w4, 
    fc_w5, fc_w6, fc_w7, fc_w8, fc_w9 ];                     # tableau de poids

  fc_b = \
  [ 320,  1371,    -139,  -645,   409,
     483,    -237,   619, -1110,  -167];                       # tableau de bias


  scale = 0.04697886109352112;                               # quant_dense/BiasAdd
  M_fc  = 9.234497701982036e-05 / scale;                   # (quant_dense/BiasAdd/ReadVariableOp)/(quant_dense/BiasAdd)--> (S1*S2)/S3 --> Sbias/SBiasAdd
  shift = c_int(); M0 = c_int();      
  monbib.QuantizeMultiplier( c_double(M_fc), byref(M0), byref(shift) );
  print("M_fc= ", M_fc, "M0= ", M0.value, "shift= ", shift.value);
  offset_ent =  1;                                           # input_offset  =  -zero_point de l'entrée    quant_flatten/Reshape
  offset_sor = -1;                                           # output_offset =   zero_point de la sortie   quant_dense/BiasAdd
  offset_fil =  0;                                           # output_offset =   zero_point des paramètres quant_dense/BiasAdd
  full_vec =  full_np(flatten_aux, fc_W, fc_b, M0.value, shift.value, offset_ent, offset_sor, offset_fil, verbose=1);
  print(full_vec);
  #sys.exit(0);   

  print(" \n ");
  print("************************************** ");
  print(" De-quantization                       ");
  print("************************************** ");
  #full_vec = [-24,  -8, -12,  14, -16,  13,  -6,  -7, -10, -11]; #print(full_vec);
  #full_vec = np.asarray(full_vec);                        # Convertir données à tableau numpy
  scale = 0.04698627; zero_point = -1;                     # quant_dense/BiasAdd
  full_vec = np.asarray(full_vec);
  de_q = scale*( full_vec - zero_point );                  # r = S*(q-z)
  print(de_q);
  #sys.exit(0);                                            # Terminer l'execution

  print(" \n ");
  print("************************************** ");
  print(" Performance: Exactitude               ");
  print("************************************** ");
  predict = np.argmax(full_vec);
  return predict;


print(" \n ");
print("************************************** ");
print(" Evaluation du modèle                  ");
print("************************************** ");
 
# Load MNIST data set 
mnist = keras.datasets.mnist;
(train_images, train_labels), (test_images, test_labels) = mnist.load_data();
#test_images = test_images[0:1000];
#test_labels = test_labels[0:1000];
test_images = test_images[0:1000];
test_labels = test_labels[0:1000];
 
# Imprimer quelques images
fig = plt.figure(figsize=(3,3));
plt.imshow(test_images[0], cmap="gray", interpolation=None);
plt.title(test_labels[0]);
plt.tight_layout();
plt.show();
#print(img_test);
 
pre_vec = [];                                              # Vecteur des predictions
for idx, test_image in enumerate(test_images):
  test_image = np.float32(test_image); 
  pre_vec.append( eva_model(test_image, verbose=1) );
pre_vec     = np.asarray( pre_vec );     # print( pre_vec );
test_labels = np.asarray( test_labels ); # print( test_labels );

count = 0;
for x in range(0,len(test_labels)):
  if test_labels[x] == pre_vec[x]:
    count += 1;


accuracy = ( pre_vec == test_labels ).mean();
print("Predictions: ", pre_vec );
print("Test Labels: ", test_labels );
print("Exactitude:  ", accuracy);
print("Accuracy: ", count,"/1000");


print("                                      ");
print("**************************************");
print("*  ¡Merci d'utiliser ce logiciel!    *");
print("*             (8-)                   *");
print("**************************************");  